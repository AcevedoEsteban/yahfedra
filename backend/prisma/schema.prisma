generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  filename  String
  bio       String?
  image     String?
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     Post[]
  comments  Comment[]
  likes     Like[]
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  text      String
  video     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]    @relation("PostLikes")
  title     String
}

model Comment {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  postId    Int       @map("post_id")
  text      String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updatedat")
  likes     Like[]    @relation("CommentLikes")
}

model Like {
  id        Int       @id @default(autoincrement())
  type      LikeType
  userId    Int
  postId    Int?      @map("post_id")
  commentId Int?      @map("comment_id")
  user      User      @relation(fields: [userId], references: [id])
  post      Post?     @relation(fields: [postId], references: [id], name: "PostLikes")
  comment   Comment?  @relation(fields: [commentId], references: [id], name: "CommentLikes")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  @@unique([userId, postId, commentId], name: "like_user_post_comment_unique")
}

enum LikeType {
  LIKE
  DISLIKE
}
